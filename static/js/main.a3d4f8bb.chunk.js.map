{"version":3,"sources":["components/CardHolder/index.js","components/Title/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["Card","props","className","onClick","clickedId","id","alt","name","src","image","Title","title","score","highscore","Wrapper","children","App","state","avatar","shuffleData","i","length","j","Math","floor","random","temp","guessCorrect","newData","map","character","newItem","clicked","handleCorrect","gameOver","data","setState","resetData","alert","this","Fragment","CardHolder","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"orEAaeA,MAVf,SAAcC,GACZ,OACE,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MACzD,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,MCO1BC,MAXf,SAAeT,GACX,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAaD,EAAMU,OACjC,uBAAGT,UAAU,QAAO,2CAAyBD,EAAMW,MAAnD,IAA0D,gDAA8BX,EAAMY,c,aCD/FC,MAJf,SAAiBb,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMc,W,ujBC6E1BC,E,2MA1EXC,MAAQ,CACJC,SACAN,MAAO,EACPC,UAAW,G,EAOfM,YAAc,SAAAD,GAEV,IADA,IAAIE,EAAIF,EAAOG,OAAS,EACjBD,EAAI,GAAG,CACV,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOR,EAAOE,GACpBF,EAAOE,GAAKF,EAAOI,GACnBJ,EAAOI,GAAKI,EACZN,IAEJ,OAAOF,G,EAGXd,UAAY,SAAAC,GACR,IAAIsB,GAAe,EACbC,EAAU,EAAKX,MAAMC,OAAOW,IAAI,SAAAC,GAClC,IAAMC,EAAO,KAAOD,GAOpB,OANIC,EAAQ1B,KAAOA,IACV0B,EAAQC,UACTD,EAAQC,SAAU,EAClBL,GAAe,IAGhBI,IAEXJ,EAAe,EAAKM,cAAcL,GAAW,EAAKM,SAASN,I,EAG/DK,cAAgB,SAAAE,GACZ,EAAKC,SAAS,CACVlB,OAAQ,EAAKC,YAAYgB,GACzBvB,MAAO,EAAKK,MAAML,MAAQ,K,EAIlCsB,SAAW,SAAAhB,GACH,EAAKD,MAAML,MAAQ,EAAKK,MAAMJ,WAC9B,EAAKuB,SAAS,CAACvB,UAAW,EAAKI,MAAML,QACzC,IAAMyB,EAAYnB,EAAOW,IAAI,SAAAC,GAAS,YAAUA,EAAV,CAAqBE,SAAS,MACpEM,MAAM,8DAAD,OAA+D,EAAKrB,MAAML,QAC/E,EAAKwB,SAAS,CACVxB,MAAO,EACPM,OAAQmB,K,mFA5CZE,KAAKH,SAAS,CAAED,KAAMI,KAAKpB,YAAYoB,KAAKtB,MAAMC,Y,+BAgD5C,IAAD,OACL,OACI,kBAAC,IAAMsB,SAAP,KACI,kBAAC,EAAD,CAAO7B,MAAM,yCAAyCC,MAAO2B,KAAKtB,MAAML,MAAOC,UAAW0B,KAAKtB,MAAMJ,YACrG,kBAAC,EAAD,KACK0B,KAAKtB,MAAMC,OAAOW,IAAI,SAAAC,GAAS,OAC5B,kBAACW,EAAD,CACIrC,UAAW,EAAKA,UAChBsC,IAAKZ,EAAUzB,GACfA,GAAIyB,EAAUzB,GACdI,MAAOqB,EAAUrB,gB,GAlE3BkC,IAAMC,W,MCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a3d4f8bb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\" onClick={() => props.clickedId(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">{props.title}</h1>\r\n                <p className=\"lead\"><strong>SCORE: </strong>{props.score} <strong>HIGH SCORE: </strong>{props.highscore}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport CardHolder from \"./components/CardHolder\";\nimport Title from \"./components/Title\"\nimport avatar from \"./avatar.json\";\nimport Wrapper from \"./components/Wrapper\"\n\nclass App extends React.Component {\n    state = {\n        avatar,\n        score: 0,\n        highscore: 0\n    };\n\n    componentDidMount() {\n        this.setState({ data: this.shuffleData(this.state.avatar)});\n    }\n\n    shuffleData = avatar => {\n        let i = avatar.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = avatar[i];\n            avatar[i] = avatar[j];\n            avatar[j] = temp;\n            i--;\n        }\n        return avatar;\n    }\n\n    clickedId = id => {\n        let guessCorrect = false;\n        const newData = this.state.avatar.map(character =>{\n            const newItem = {...character}\n            if (newItem.id === id) {\n                if (!newItem.clicked) {\n                    newItem.clicked = true;\n                    guessCorrect = true;\n                }\n            }\n            return newItem;\n        });\n        guessCorrect ? this.handleCorrect(newData) : this.gameOver(newData);\n    }\n\n    handleCorrect = data => {\n        this.setState({\n            avatar: this.shuffleData(data),\n            score: this.state.score + 1\n        })\n    }\n\n    gameOver = avatar => {\n        if (this.state.score > this.state.highscore) {\n            this.setState({highscore: this.state.score})}\n        const resetData = avatar.map(character => ({ ...character, clicked: false }));\n        alert(`Oh no, the Fire Nation took over! You lost.. \\nYour score: ${this.state.score}`);\n        this.setState({ \n            score: 0,\n            avatar: resetData\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Title title=\"Avatar: The Last Airbender Memory Game\" score={this.state.score} highscore={this.state.highscore} />\n                <Wrapper>\n                    {this.state.avatar.map(character => (\n                        <CardHolder\n                            clickedId={this.clickedId}\n                            key={character.id}\n                            id={character.id}\n                            image={character.image}\n                        />\n                    ))}\n                </Wrapper>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}